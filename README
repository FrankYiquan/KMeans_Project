Python version: 3.10

Ensure you have the following Python packages installed:
1) sklearn
2) pandas
3) matplotlib
4) Numpy
5) random
6) math

File Explanation:

iris and wine dataset are at package iris and wine

main.py: implemented the KMeans, KMeans++, normalized_mutual_information_score and silhouette_score under the class MyKMeans. This satisfy the assignment requirement (a) and (b)
Key method:
    __init__(k,  x, random_state: int, true_label, max_iter = 100, min_check = 1e-4):  initilize the class with k cluster, random state, features x and true label. max_iter default to 100 and min_check is the convergence check and default to be 1e-4
    train(method = "KMean"): do the cluster analysis. Method default to KMeans. You can set it to KMean++ to underwent KMean++. A predict() is provided but there is no need to run it since this method already return the clustering results.
    silhouette_score(): return the silhouette_score
    normalized_mutual_information_score(): return the normalized_mutual_information_score

part_C1.py: codes for reproducing the table and graph on report section (C.1). This file aims to use elbow method and Silhouette Score to determine optimal k for dataset Iris.
Example Output: Graph and
                k = 2, : WCSS: 152.36870647733903, My Silhouette Score: 0.6813042762896313, Real Silhouette Score: 0.6808136202936815
                k = 3, : WCSS: 78.94084142614602, My Silhouette Score: 0.56003817789559, Real Silhouette Score: 0.5525919445499754
                                                                ...
                k = 9, : WCSS: 29.07916573864944, My Silhouette Score: 0.37373491654788776, Real Silhouette Score: 0.3082630415946508

part_C2.py: codes for reproducing the table and graph on report section (C.2). This file aims to use elbow method and Silhouette Score to determine optimal k for dataset Wine.
Example Output: Graph and
                k = 2, : WCSS: 4543749.614531862, My Silhouette Score: 0.6608922078311726, Real Silhouette Score: 0.6568536504294317
                k = 3, : WCSS: 2370689.686782968, My Silhouette Score: 0.5784191927934976, Real Silhouette Score: 0.571138193786884
                                                                    ...
                k = 9, : WCSS: 276587.86464382964, My Silhouette Score: 0.5577207885135143, Real Silhouette Score: 0.5431736964173127

part_C3.py: codes for reproducing the table and graph on report section (C.3). Codes for determine NMI score after determining the optimal k
Example Output:
                                                    iris dataset:
                                                    k = 2, : my NMI: 0.5977807714440937, real NMI: 0.6565191143081124
                                                    wine dataset:
                                                    k = 2, : my NMI: 0.42591862667461183, real NMI: 0.42591862667461144
                                                                        ...
                                                    wine dataset:
                                                    k = 9, : my NMI: 0.3432272541669471, real NMI: 0.3511695211713766
part_D.py: codes for reproducing the table and graph on report section (D and E). Aiming to compare performance of model using KMeans vs KMeans++ and plot graph to compare my implementation vs built-in libraries.
Example Output: Graph and
                            iris dataset
                            KMean++
                            k = 2, : WCSS: 152.36870647733903, My Silhouette Score: 0.6813042762896313, Real Silhouette Score: 0.6808136202936815
                                                                ...
                            KMean++
                            k = 9, : WCSS: 290111.64183758595, My Silhouette Score: 0.5596885818694388, Real Silhouette Score: 0.5052248272657792
                            kMean:
                            k = 9, : WCSS: 276587.86464382964, My Silhouette Score: 0.5577207885135143, Real Silhouette Score: 0.5431736964173127